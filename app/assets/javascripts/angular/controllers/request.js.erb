<%# encoding: utf-8 %>
function RequestCtrl($scope, $http) {
  var type_statuses = {
  'pending':         '<%= I18n.t('status.pending') %>',
  'sentToRzags':         '<%= I18n.t('status.sentToRzags') %>',
  'processed':         '<%= I18n.t('status.processed') %>',
  'refuse':         '<%= I18n.t('status.refuse') %>',
  'fault':         '<%= I18n.t('status.fault') %>',
  'ttl':         '<%= I18n.t('status.ttl') %>',
  'response':         '<%= I18n.t('status.response') %>',
  'timeout':         '<%= I18n.t('status.timeout') %>'
  };
  var type_results = {
  'undefined':         '<%= I18n.t('result_search.undefined') %>',
  'record_is_found':         '<%= I18n.t('result_search.record_is_found') %>',
  'error_search':         '<%= I18n.t('result_search.error_search') %>',
  'record_was_not_found':         '<%= I18n.t('result_search.record_was_not_found') %>',
  'refine_search':         '<%= I18n.t('result_search.refine_search') %>'
  };

  var type_records = {
  'actualled':         '<%= I18n.t('act_record_status.actualled') %>',
  'cancelled':         '<%= I18n.t('act_record_status.cancelled') %>',
  'marriage_dissolved':         '<%= I18n.t('act_record_status.marriage_dissolved') %>'
  };

  var channel;

  $scope.showSubmit = true;

  $scope.$watch('url', function(url) {
    var dispatcher = new WebSocketRails(url);
    channel = dispatcher.subscribe('response');
  });

  $scope.$watch('ticket', function(ticket) {
    channel.bind(ticket, function(newResponse) {
      $scope.$apply(function() {
        $scope.resultSearch = type_results[newResponse['resultSearch']];

        if(newResponse['status'] == 'processed') {
          if(newResponse['resultSearch']=='record_is_found') {
            recordIsFound(newResponse);
          } else if(newResponse['resultSearch'] == 'record_was_not_found') {
            $scope.result = 'record_was_not_found';
          } else {
            resultIsNegative(newResponse['errorSearchDescription']);
          }
        } else if(newResponse['status'] == 'fault') {
          showStatus(newResponse['status']);
        } else {
          Pending(newResponse['status']);
        }

        if(newResponse['status'] != 'pending' && newResponse['status'] != 'sentToRzags'){
          $scope.showSubmit = true;
        }
      });
    });
  });

  $('form').bind('submit', function() {
    // валидация!
    $scope.showSubmit = false;
    showStatus('response');

    $http({
        method: 'POST',
        url: '/requests.js',
        data: $('form').serialize(true),
        headers: {'Content-Type': 'application/x-www-form-urlencoded'}
    }).
      success(function(data, status, headers, config) {
        console.log(data['ticket']);
        if(data['ticket']==null){
          showStatus('fault');
          $scope.showSubmit = true;
        } else {
          $scope.ticket = data['ticket'];
        }
      }).
      error(function(data, status, headers, config) {
        $scope.showSubmit = true;
      });
    return false;
  });

  function  recordIsFound(newResponse) {
    $scope.actRecordUID = newResponse['actRecordUID'];
    $scope.actRecordStatus = type_records[newResponse['actRecordStatus']];

    $scope.zagsSignature = newResponse['zagsSignature'];
    $scope.smevSignature = newResponse['smevSignature'];
    prettyPrint();

    $scope.result = 'record_is_found';
  }

  function Pending(status) {
    $scope.status = type_statuses[status];
    $scope.result = 'pending';
  }

  function showStatus(status) {
    $scope.status = type_statuses[status];
    $scope.result = 'status';
  }


  function resultIsNegative(mes) {
    $scope.errorSearchDescription = type_results[mes];
    $scope.result = 'result_is_negative';
  }

//  function validateParams() {
//
//    $('#base input.required, #base .required input').each(function( index ) {
//       if(this.val() != "")
//    });
//
//  }

}

RequestCtrl.$inject = ['$scope', '$http'];